version: '3'

networks:
  ctso:
    external: true

services:
  zookeeper1:
    image: hyperledger/fabric-zookeeper:latest
    environment:
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
      - ZOO_MY_ID=2
    restart: always
    hostname: zookeeper1.citysurvey.gov
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.hostname == ${NODE2}


  kafka1:
    hostname: kafka1.citysurvey.gov
    image: hyperledger/fabric-kafka:latest
    restart: always
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=94371840          # 90 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=73400320    # 70 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      - KAFKA_BROKER_ID=2
    ports:
      - 9093:9093
    depends_on:
      # - zookeeper0
      - zookeeper1
      # - zookeeper2
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.hostname == ${NODE2}

  orderer1:
    container_name: orderer1
    hostname: orderer1.citysurvey.gov
    image: hyperledger/fabric-orderer:latest
    environment:
      - ORDERER_GENERAL_LOGLEVEL=info
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer1/msp
      # Enable TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/orderer1/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/orderer1/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/orderer1/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 8050:7050
    depends_on:
      # - kafka0
      - kafka1
      # - kafka2
      # - kafka3
    volumes:
      - ./config/:/etc/hyperledger/configtx
      - ./crypto-config/ordererOrganizations/citysurvey.gov/orderers/orderer1.citysurvey.gov/msp:/etc/hyperledger/orderer1/msp
      - ./crypto-config/ordererOrganizations/citysurvey.gov/orderers/orderer1.citysurvey.gov/tls:/etc/hyperledger/orderer1/tls

    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.hostname == ${NODE2}

  peer1_org1:
    container_name: peer1_org1
    image: hyperledger/fabric-peer:latest
    hostname: peer1.org1.citysurvey.gov
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock

      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ctso
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_ENABLED=true

      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/peer1/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/peer1/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/peer1/tls/ca.crt
      - CORE_PEER_ADDRESS=peer1.org1.citysurvey.gov:8051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.citysurvey.gov:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.citysurvey.gov:8051

      - CORE_PEER_ID=peer1.org1.citysurvey.gov
      - CORE_LOGGING_PEER=info
      - CORE_CHAINCODE_LOGGING_LEVEL=info
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer1/msp
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_ctso
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 8051:7051
      - 8053:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org1.citysurvey.gov/peers/peer1.org1.citysurvey.gov/msp:/etc/hyperledger/peer1/msp
      - ./crypto-config/peerOrganizations/org1.citysurvey.gov/peers/peer1.org1.citysurvey.gov/tls:/etc/hyperledger/peer1/tls
      - ./crypto-config/peerOrganizations/org1.citysurvey.gov/users:/etc/hyperledger/peer1/users
      - ./config:/etc/hyperledger/configtx
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.hostname == ${NODE2}
    # extra_hosts:
    #   - "orderer0.citysurvey.gov:${NODE1}"
    #   - "orderer1.citysurvey.gov:${NODE2}"
    #   - "orderer2.citysurvey.gov:${NODE3}"
    #   - "orderer3.citysurvey.gov:${NODE4}"
    #   - "peer0.org1.citysurvey.gov:${NODE1}"
    #   - "peer2.org1.citysurvey.gov:${NODE3}"
    #   - "peer3.org1.citysurvey.gov:${NODE4}"
    #   - "ca.org1.citysurvey.gov:${NODE1}"

    depends_on:
      - orderer1
      - couchdb1
    networks:
      - ctso

  couchdb1:
    container_name: couchdb1
    image: hyperledger/fabric-couchdb:latest
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 6984:5984
    networks:
      - ctso
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.hostname == ${NODE2}
